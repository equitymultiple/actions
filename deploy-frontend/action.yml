name: "Deploy a React application to S3 and CloudFront"
description: "Build a React app, sync the build to S3, and invalidate the CloudFront cache"
inputs:
  aws-region:
    description: "Which AWS region to use"
    required: false
    default: "us-east-2"
  iam-role:
    description: "IAM Role to use with OIDC authentication"
    required: true
  cross-account-iam-role:
    description: "Cross-account account role to assume"
    required: false
    default: ""
  application-name:
    required: true
    description: "The name of the frontend service"
  environment:
    required: false
    description: "Full name of the deployment environment to deploy to"
    default: development
  artifact-name:
    required: true
    description: "Name of the artifact to deploy"

runs:
  using: "composite"
  steps:
  - name: AWS Credentials
    uses: aws-actions/configure-aws-credentials@v1
    with:
      aws-region: ${{ inputs.aws-region }}
      role-to-assume: ${{ inputs.iam-role }}

  - name: AWS Credentials - Cross-account Role
    uses: aws-actions/configure-aws-credentials@v1
    if: inputs.cross-account-iam-role != ''
    with:
      aws-region: ${{ inputs.aws-region }}
      role-to-assume: ${{ inputs.cross-account-iam-role }}
      aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
      aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
      role-skip-session-tagging: true
      role-duration-seconds: 3000

  - uses: actions/download-artifact@v3
    with:
      name: ${{ inputs.artifact-name }}
      path: build

  - name: Sync the build folder to S3 bucket
    id: sync-s3
    shell: bash
    run: aws s3 sync ./build/ s3://equitymultiple-${{ inputs.environment }}-${{ inputs.application-name }}-origin

  - name: Get CloudFront distribution
    id: get-cloudfront-id
    shell: bash
    run: |
      CLOUDFRONT_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[*].{id:Id,origin:DefaultCacheBehavior.TargetOriginId}[?origin=='equitymultiple-${{ inputs.environment }}-${{ inputs.application-name }}']" | jq -r ".[0].id")
      echo "CLOUDFRONT_ID=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT

  - name: Invalidate CloudFront cache
    shell: bash
    run: aws cloudfront create-invalidation --distribution-id ${{ steps.get-cloudfront-id.outputs.CLOUDFRONT_ID }} --paths "/"
